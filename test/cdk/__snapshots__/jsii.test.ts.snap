// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`language bindings package:dotnet task 1`] = `
Object {
  "description": "Create dotnet language bindings",
  "name": "package:dotnet",
  "steps": Array [
    Object {
      "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
    },
    Object {
      "exec": "npx jsii-pacmak@$jsii_version -v --target dotnet",
    },
  ],
}
`;

exports[`language bindings package:go task 1`] = `
Object {
  "description": "Create go language bindings",
  "name": "package:go",
  "steps": Array [
    Object {
      "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
    },
    Object {
      "exec": "npx jsii-pacmak@$jsii_version -v --target go",
    },
  ],
}
`;

exports[`language bindings package:java task 1`] = `
Object {
  "description": "Create java language bindings",
  "name": "package:java",
  "steps": Array [
    Object {
      "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
    },
    Object {
      "exec": "npx jsii-pacmak@$jsii_version -v --target java",
    },
  ],
}
`;

exports[`language bindings package:js task 1`] = `
Object {
  "description": "Create js language bindings",
  "name": "package:js",
  "steps": Array [
    Object {
      "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
    },
    Object {
      "exec": "npx jsii-pacmak@$jsii_version -v --target js",
    },
  ],
}
`;

exports[`language bindings package:python task 1`] = `
Object {
  "description": "Create python language bindings",
  "name": "package:python",
  "steps": Array [
    Object {
      "exec": "jsii_version=$(node -p \\"JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]\\")",
    },
    Object {
      "exec": "npx jsii-pacmak@$jsii_version -v --target python",
    },
  ],
}
`;

exports[`language bindings package-all creates all bindings 1`] = `
Object {
  "description": "Packages artifacts for all target languages",
  "name": "package-all",
  "steps": Array [
    Object {
      "spawn": "package:js",
    },
    Object {
      "spawn": "package:java",
    },
    Object {
      "spawn": "package:python",
    },
    Object {
      "spawn": "package:dotnet",
    },
    Object {
      "spawn": "package:go",
    },
  ],
}
`;

exports[`language bindings release workflow includes release_golang job 1`] = `
Object {
  "if": "needs.release.outputs.latest_commit == github.sha",
  "name": "Publish to GitHub Go Module Repository",
  "needs": "release",
  "permissions": Object {
    "contents": "read",
  },
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "uses": "actions/setup-go@v2",
      "with": Object {
        "go-version": "^1.16.0",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create go artifact",
      "run": "cd .repo && npx projen package:go",
    },
    Object {
      "name": "Collect go Artifact",
      "run": "mv .repo/dist dist",
    },
    Object {
      "env": Object {
        "GITHUB_TOKEN": "\${{ secrets.GO_GITHUB_TOKEN }}",
        "GIT_USER_EMAIL": "github-actions@github.com",
        "GIT_USER_NAME": "github-actions",
      },
      "name": "Release",
      "run": "npx -p publib@latest publib-golang",
    },
  ],
}
`;

exports[`language bindings release workflow includes release_maven job 1`] = `
Object {
  "if": "needs.release.outputs.latest_commit == github.sha",
  "name": "Publish to Maven Central",
  "needs": "release",
  "permissions": Object {
    "contents": "read",
  },
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-java@v2",
      "with": Object {
        "distribution": "temurin",
        "java-version": "11.x",
      },
    },
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create java artifact",
      "run": "cd .repo && npx projen package:java",
    },
    Object {
      "name": "Collect java Artifact",
      "run": "mv .repo/dist dist",
    },
    Object {
      "env": Object {
        "MAVEN_GPG_PRIVATE_KEY": "\${{ secrets.MAVEN_GPG_PRIVATE_KEY }}",
        "MAVEN_GPG_PRIVATE_KEY_PASSPHRASE": "\${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}",
        "MAVEN_PASSWORD": "\${{ secrets.MAVEN_PASSWORD }}",
        "MAVEN_STAGING_PROFILE_ID": "\${{ secrets.MAVEN_STAGING_PROFILE_ID }}",
        "MAVEN_USERNAME": "\${{ secrets.MAVEN_USERNAME }}",
      },
      "name": "Release",
      "run": "npx -p publib@latest publib-maven",
    },
  ],
}
`;

exports[`language bindings release workflow includes release_npm job 1`] = `
Object {
  "if": "needs.release.outputs.latest_commit == github.sha",
  "name": "Publish to npm",
  "needs": "release",
  "permissions": Object {
    "contents": "read",
  },
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create js artifact",
      "run": "cd .repo && npx projen package:js",
    },
    Object {
      "name": "Collect js Artifact",
      "run": "mv .repo/dist dist",
    },
    Object {
      "env": Object {
        "NPM_DIST_TAG": "latest",
        "NPM_REGISTRY": "registry.npmjs.org",
        "NPM_TOKEN": "\${{ secrets.NPM_TOKEN }}",
      },
      "name": "Release",
      "run": "npx -p publib@latest publib-npm",
    },
  ],
}
`;

exports[`language bindings release workflow includes release_nuget job 1`] = `
Object {
  "if": "needs.release.outputs.latest_commit == github.sha",
  "name": "Publish to NuGet Gallery",
  "needs": "release",
  "permissions": Object {
    "contents": "read",
  },
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "uses": "actions/setup-dotnet@v1",
      "with": Object {
        "dotnet-version": "3.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create dotnet artifact",
      "run": "cd .repo && npx projen package:dotnet",
    },
    Object {
      "name": "Collect dotnet Artifact",
      "run": "mv .repo/dist dist",
    },
    Object {
      "env": Object {
        "NUGET_API_KEY": "\${{ secrets.NUGET_API_KEY }}",
      },
      "name": "Release",
      "run": "npx -p publib@latest publib-nuget",
    },
  ],
}
`;

exports[`language bindings release workflow includes release_pypi job 1`] = `
Object {
  "if": "needs.release.outputs.latest_commit == github.sha",
  "name": "Publish to PyPI",
  "needs": "release",
  "permissions": Object {
    "contents": "read",
  },
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "uses": "actions/setup-python@v2",
      "with": Object {
        "python-version": "3.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create python artifact",
      "run": "cd .repo && npx projen package:python",
    },
    Object {
      "name": "Collect python Artifact",
      "run": "mv .repo/dist dist",
    },
    Object {
      "env": Object {
        "TWINE_PASSWORD": "\${{ secrets.TWINE_PASSWORD }}",
        "TWINE_USERNAME": "\${{ secrets.TWINE_USERNAME }}",
      },
      "name": "Release",
      "run": "npx -p publib@latest publib-pypi",
    },
  ],
}
`;

exports[`language bindings snapshot dotnet 1`] = `
Object {
  "if": "! needs.build.outputs.self_mutation_happened",
  "needs": "build",
  "permissions": Object {},
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "uses": "actions/setup-dotnet@v1",
      "with": Object {
        "dotnet-version": "3.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create dotnet artifact",
      "run": "cd .repo && npx projen package:dotnet",
    },
    Object {
      "name": "Collect dotnet Artifact",
      "run": "mv .repo/dist dist",
    },
  ],
}
`;

exports[`language bindings snapshot go 1`] = `
Object {
  "if": "! needs.build.outputs.self_mutation_happened",
  "needs": "build",
  "permissions": Object {},
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "uses": "actions/setup-go@v2",
      "with": Object {
        "go-version": "^1.16.0",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create go artifact",
      "run": "cd .repo && npx projen package:go",
    },
    Object {
      "name": "Collect go Artifact",
      "run": "mv .repo/dist dist",
    },
  ],
}
`;

exports[`language bindings snapshot java 1`] = `
Object {
  "if": "! needs.build.outputs.self_mutation_happened",
  "needs": "build",
  "permissions": Object {},
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-java@v2",
      "with": Object {
        "distribution": "temurin",
        "java-version": "11.x",
      },
    },
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create java artifact",
      "run": "cd .repo && npx projen package:java",
    },
    Object {
      "name": "Collect java Artifact",
      "run": "mv .repo/dist dist",
    },
  ],
}
`;

exports[`language bindings snapshot js 1`] = `
Object {
  "if": "! needs.build.outputs.self_mutation_happened",
  "needs": "build",
  "permissions": Object {},
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create js artifact",
      "run": "cd .repo && npx projen package:js",
    },
    Object {
      "name": "Collect js Artifact",
      "run": "mv .repo/dist dist",
    },
  ],
}
`;

exports[`language bindings snapshot python 1`] = `
Object {
  "if": "! needs.build.outputs.self_mutation_happened",
  "needs": "build",
  "permissions": Object {},
  "runs-on": "ubuntu-latest",
  "steps": Array [
    Object {
      "uses": "actions/setup-node@v2",
      "with": Object {
        "node-version": "14.x",
      },
    },
    Object {
      "uses": "actions/setup-python@v2",
      "with": Object {
        "python-version": "3.x",
      },
    },
    Object {
      "name": "Download build artifacts",
      "uses": "actions/download-artifact@v2",
      "with": Object {
        "name": "build-artifact",
        "path": "dist",
      },
    },
    Object {
      "name": "Prepare Repository",
      "run": "mv dist .repo",
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .repo && yarn install --check-files --frozen-lockfile",
    },
    Object {
      "name": "Create python artifact",
      "run": "cd .repo && npx projen package:python",
    },
    Object {
      "name": "Collect python Artifact",
      "run": "mv .repo/dist dist",
    },
  ],
}
`;

exports[`publish to go customizations 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - master
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Collect GitHub Metadata
        run: mv .repo/dist dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create js artifact
        run: cd .repo && npx projen package:js
      - name: Collect js Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}
  release_golang:
    name: Publish to GitHub Go Module Repository
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16.0
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create go artifact
        run: cd .repo && npx projen package:go
      - name: Collect go Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-golang
        env:
          GITHUB_REPO: github.com/foo/bar
          GIT_BRANCH: custom-branch
          GIT_USER_NAME: custom user
          GIT_USER_EMAIL: custom@email.com
          GIT_COMMIT_MESSAGE: custom commit message
          GITHUB_TOKEN: \${{ secrets.CUSTOM_SECRET }}
"
`;

exports[`publish to go defaults 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - master
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\"
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Collect GitHub Metadata
        run: mv .repo/dist dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create js artifact
        run: cd .repo && npx projen package:js
      - name: Collect js Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}
  release_golang:
    name: Publish to GitHub Go Module Repository
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16.0
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create go artifact
        run: cd .repo && npx projen package:go
      - name: Collect go Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-golang
        env:
          GIT_USER_NAME: github-actions
          GIT_USER_EMAIL: github-actions@github.com
          GITHUB_TOKEN: \${{ secrets.GO_GITHUB_TOKEN }}
"
`;
