// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`poetry enabled with poetry-specific options 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.github/workflows/stale.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/pyproject.toml linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v3.4.6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".github/workflows/stale.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: stale
on:
  schedule:
    - cron: 0 1 * * *
  workflow_dispatch: {}
jobs:
  stale:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/stale@v4
        with:
          days-before-stale: -1
          days-before-close: -1
          days-before-pr-stale: 14
          days-before-pr-close: 2
          stale-pr-message: This pull request is now marked as stale because it hasn't seen activity for a while. Add a comment or it will be closed soon. If you wish to exclude this issue from being marked as stale, add the \\"backlog\\" label.
          close-pr-message: Closing this pull request as it hasn't seen activity for a while. Please add a comment @mentioning a maintainer to reopen. If you wish to exclude this issue from being marked as stale, add the \\"backlog\\" label.
          stale-pr-label: stale
          exempt-pr-labels: backlog
          days-before-issue-stale: 60
          days-before-issue-close: 7
          stale-issue-message: This issue is now marked as stale because it hasn't seen activity for a while. Add a comment or it will be closed soon. If you wish to exclude this issue from being marked as stale, add the \\"backlog\\" label.
          close-issue-message: Closing this issue as it hasn't seen activity for a while. Please add a comment @mentioning a maintainer to reopen. If you wish to exclude this issue from being marked as stale, add the \\"backlog\\" label.
          stale-issue-label: stale
          exempt-issue-labels: backlog
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/.github/workflows/stale.yml
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/

cython_debug/
",
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      Object {
        "name": "pytest",
        "type": "devenv",
        "version": "6.2.1",
      },
      Object {
        "name": "package1",
        "type": "runtime",
        "version": "0.0.1",
      },
      Object {
        "name": "package2",
        "type": "runtime",
        "version": "0.0.2",
      },
    ],
  },
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".github/workflows/stale.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "env": Object {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
      },
      "default": Object {
        "description": "Synthesize project files",
        "name": "default",
        "steps": Array [
          Object {
            "exec": "python .projenrc.py",
          },
        ],
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "install": Object {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": Array [
          Object {
            "exec": "poetry update",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": Array [
          Object {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "publish": Object {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": Array [
          Object {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": Object {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": Array [
          Object {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
        "steps": Array [
          Object {
            "exec": "pytest",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

[repositories.testpypi]
url = \\"https://test.pypi.org/legacy/\\"
",
  "pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

[build-system]
requires = [ \\"poetry_core>=1.0.0\\" ]
build-backend = \\"poetry.core.masonry.api\\"

[tool.poetry]
name = \\"test-python-project\\"
version = \\"0.1.0\\"
description = \\"a short project description\\"
license = \\"Apache-2.0\\"
authors = [ \\"First Last <email@example.com>\\" ]
homepage = \\"http://www.example.com\\"
classifiers = [ \\"Development Status :: 4 - Beta\\" ]
readme = \\"README.md\\"
maintainers = [ \\"First-2 Last-2\\" ]
repository = \\"https://github.com/test-python-project\\"
keywords = [ \\"Keyword1\\" ]
include = [ \\"CHANGELOG.md\\" ]
exclude = [ \\"my_package/excluded.py\\" ]

  [[tool.poetry.packages]]
  include = \\"my_package\\"
  format = \\"sdist\\"

  [[tool.poetry.source]]
  name = \\"pypi_\\"
  url = \\"https://pypi.org/simple/\\"
  default = true

  [tool.poetry.scripts]
  test-python-cli = \\"test-python-project.cli:cli\\"

  [tool.poetry.extras]
  cli = [ \\"package1\\", \\"package2\\" ]

[tool.poetry.plugins.\\"blogtool.parsers\\"]
\\".rst\\" = \\"some_module:SomeClass\\"

  [tool.poetry.urls]
  \\"bug tracker\\" = \\"https://github.com/test-python-project/issues\\"

  [tool.poetry.dependencies]
  package1 = \\"0.0.1\\"
  package2 = \\"0.0.2\\"
  python = \\"^3.6\\"

  [tool.poetry.dev-dependencies]
  projen = \\"99.99.99\\"
  pytest = \\"6.2.1\\"
",
  "test_python_project/__init__.py": "__version__ = \\"0.1.0\\"
",
  "test_python_project/__main__.py": "from .example import hello

if __name__ == \\"__main__\\":
    name = input(\\"What is your name? \\")
    print(hello(name))
",
  "test_python_project/example.py": "def hello(name: str) -> str:
    \\"\\"\\"A simple greeting.
    Args:
        name (str): Name to greet.
    Returns:
        str: greeting message
    \\"\\"\\"
    return f\\"Hello {name}!\\"
",
  "tests/__init__.py": "",
  "tests/test_example.py": "import pytest

from test_python_project.example import hello

@pytest.mark.parametrize(
    (\\"name\\", \\"expected\\"),
    [
        (\\"A. Musing\\", \\"Hello A. Musing!\\"),
        (\\"traveler\\", \\"Hello traveler!\\"),
        (\\"projen developer\\", \\"Hello projen developer!\\"),
    ],
)
def test_hello(name, expected):
    \\"\\"\\"Example test with parametrization.\\"\\"\\"
    assert hello(name) == expected
",
}
`;
